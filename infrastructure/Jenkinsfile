pipeline {
    agent any

    environment {
        DOCKER_IMAGE_FRONTEND = 'frontend-image'
        DOCKER_IMAGE_BACKEND = 'backend-image'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-creds'
        DOCKERHUB_USERNAME = 'assane764'
        FRONTEND_IMAGE_TAG = "${env.BUILD_NUMBER}-frontend"
        BACKEND_IMAGE_TAG = "${env.BUILD_NUMBER}-backend"
        FRONTEND_DOCKERFILE_PATH = 'C:/Users/assan/Projet-DEVOPS/frontend/Dockerfile'
        BACKEND_DOCKERFILE_PATH = 'C:/Users/assan/Projet-DEVOPS/backend/Dockerfile'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üìÇ R√©cup√©ration du code depuis le repository..."
                git url: 'https://github.com/GemimaOndele/Projet-DEVOPS.git', branch: 'main'
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                echo "üõ† Construction de l‚Äôimage Docker pour le frontend..."
                bat "docker build -t %DOCKER_IMAGE_FRONTEND%:%FRONTEND_IMAGE_TAG% -f %FRONTEND_DOCKERFILE_PATH% C:/Users/assan/Projet-DEVOPS/frontend"
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                echo "üõ† Construction de l‚Äôimage Docker pour le backend..."
                bat "docker build -t %DOCKER_IMAGE_BACKEND%:%BACKEND_IMAGE_TAG% -f %BACKEND_DOCKERFILE_PATH% C:/Users/assan/Projet-DEVOPS/backend"
            }
        }

        stage('Test Frontend Container') {
            steps {
                script {
                    bat 'docker stop frontend-container || exit 0'
                    bat 'docker rm frontend-container || exit 0'
                    bat "docker run -d --name frontend-container %DOCKER_IMAGE_FRONTEND%:%FRONTEND_IMAGE_TAG%"
                    echo "V√©rification du d√©marrage du conteneur frontend..."
                    bat 'docker ps -a'
                }
            }
        }

        stage('Test Backend Container') {
            steps {
                script {
                    bat 'docker stop backend-container || exit 0'
                    bat 'docker rm backend-container || exit 0'
                    bat "docker run -d --name backend-container %DOCKER_IMAGE_BACKEND%:%BACKEND_IMAGE_TAG%"
                    echo "V√©rification du d√©marrage du conteneur backend..."
                    bat 'docker ps -a'
                }
            }
        }

        stage('Push Frontend to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS_ID) {
                        bat "docker tag %DOCKER_IMAGE_FRONTEND%:%FRONTEND_IMAGE_TAG% %DOCKERHUB_USERNAME%/%DOCKER_IMAGE_FRONTEND%:%FRONTEND_IMAGE_TAG%"
                        bat "docker push %DOCKERHUB_USERNAME%/%DOCKER_IMAGE_FRONTEND%:%FRONTEND_IMAGE_TAG%"
                    }
                }
            }
        }

        stage('Push Backend to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS_ID) {
                        bat "docker tag %DOCKER_IMAGE_BACKEND%:%BACKEND_IMAGE_TAG% %DOCKERHUB_USERNAME%/%DOCKER_IMAGE_BACKEND%:%BACKEND_IMAGE_TAG%"
                        bat "docker push %DOCKERHUB_USERNAME%/%DOCKER_IMAGE_BACKEND%:%BACKEND_IMAGE_TAG%"
                    }
                }
            }
        }

        stage('Deploy Locally') {
            steps {
                echo "üöÄ D√©ploiement local avec docker-compose..."
                bat """
                    powershell -Command "(Get-Content docker-compose.yml).replace('\${BUILD_NUMBER}', '%BUILD_NUMBER%') | Set-Content docker-compose.generated.yml"
                """
                bat 'docker-compose -f docker-compose.generated.yml down || exit 0'
                bat 'docker-compose -f docker-compose.generated.yml up -d'
            }
        }

        stage('Smoke Test Backend') {
            steps {
                echo "üîç V√©rification que le backend r√©pond..."
                bat 'curl http://localhost:4000 || exit 1'
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage Docker...'
            script {
                bat 'docker stop frontend-container || exit 0'
                bat 'docker rm frontend-container || exit 0'
                bat 'docker stop backend-container || exit 0'
                bat 'docker rm backend-container || exit 0'
                bat 'docker image prune -f'
                bat 'docker container prune -f'
            }
        }
    }
}
